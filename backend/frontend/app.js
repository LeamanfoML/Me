// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();
tg.MainButton.setText("–ó–ê–ö–†–´–¢–¨").show();

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const refreshBtn = document.getElementById('refreshBtn');
const autoRefreshToggle = document.getElementById('autoRefreshToggle');
const sortSelect = document.getElementById('sortSelect');
const minProfitInput = document.getElementById('minProfit');
const maxPriceInput = document.getElementById('maxPrice');
const applyFiltersBtn = document.getElementById('applyFilters');
const opportunitiesList = document.getElementById('opportunitiesList');
const lastUpdateSpan = document.getElementById('lastUpdate');
const totalOpportunitiesSpan = document.getElementById('totalOpportunities');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = "https://your-domain.com/api"; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
let autoRefreshInterval;
let currentFilters = {
    minProfit: 0.1,
    maxPrice: 100,
    sortBy: 'profit_desc'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    loadOpportunities();
    setupEventListeners();
    startAutoRefresh();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    refreshBtn.addEventListener('click', loadOpportunities);
    applyFiltersBtn.addEventListener('click', applyFilters);
    sortSelect.addEventListener('change', () => {
        currentFilters.sortBy = sortSelect.value;
        loadOpportunities();
    });
    autoRefreshToggle.addEventListener('change', toggleAutoRefresh);
    tg.MainButton.onClick(() => tg.close());
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
async function loadOpportunities() {
    try {
        tg.showProgressBar();
        
        const params = new URLSearchParams({
            min_profit: currentFilters.minProfit,
            max_price: currentFilters.maxPrice,
            sort_by: currentFilters.sortBy
        });
        
        const response = await fetch(`${API_URL}/opportunities?${params}`);
        const data = await response.json();
        
        if (data.success) {
            renderOpportunities(data.data);
            updateStats(data.data.length);
        } else {
            tg.showAlert(`–û—à–∏–±–∫–∞: ${data.error}`);
        }
    } catch (error) {
        tg.showAlert(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        tg.hideProgressBar();
    }
}

// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
function renderOpportunities(opportunities) {
    opportunitiesList.innerHTML = '';
    
    if (opportunities.length === 0) {
        opportunitiesList.innerHTML = '<p class="no-data">üö´ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }
    
    opportunities.forEach(opp => {
        const card = document.createElement('div');
        card.className = 'opportunity-card';
        
        card.innerHTML = `
            <div class="card-header">
                <div class="gift-name">${opp.gift_name}</div>
                <div class="model">${opp.model}</div>
            </div>
            
            <div class="prices">
                <div class="price-item">
                    <div class="price-label">–ê—É–∫—Ü–∏–æ–Ω</div>
                    <div class="price-value">${opp.auction_price} TON</div>
                </div>
                <div class="price-item">
                    <div class="price-label">Portals</div>
                    <div class="price-value">${opp.portals_price} TON</div>
                </div>
                <div class="price-item">
                    <div class="price-label">Tonnel</div>
                    <div class="price-value">${opp.tonnel_price} TON</div>
                </div>
            </div>
            
            <div class="profit ${opp.profit > 0 ? 'positive' : ''}">
                ${opp.profit > 0 ? '+' : ''}${opp.profit.toFixed(2)} TON
            </div>
            
            <div class="auction-time">
                <span>${opp.marketplace}</span>
                <span>–û–∫–æ–Ω—á–∞–Ω–∏–µ: ${formatTime(opp.auction_end_time)}</span>
            </div>
        `;
        
        opportunitiesList.appendChild(card);
    });
}

// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
function applyFilters() {
    currentFilters.minProfit = parseFloat(minProfitInput.value) || 0.1;
    currentFilters.maxPrice = parseFloat(maxPriceInput.value) || 100;
    loadOpportunities();
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
function updateStats(count) {
    totalOpportunitiesSpan.textContent = count;
    lastUpdateSpan.textContent = new Date().toLocaleTimeString();
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
function startAutoRefresh() {
    if (autoRefreshInterval) clearInterval(autoRefreshInterval);
    autoRefreshInterval = setInterval(loadOpportunities, 10000);
}

function toggleAutoRefresh() {
    if (autoRefreshToggle.checked) {
        startAutoRefresh();
    } else {
        clearInterval(autoRefreshInterval);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatTime(isoString) {
    const date = new Date(isoString);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
document.addEventListener('DOMContentLoaded', initApp);
