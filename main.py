# main.py

import telebot
from telebot import types
import sqlite3
import requests
import time
import os
from dotenv import load_dotenv
from utils import fetch_market_data, calculate_profit, update_tokens

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
DB_PATH = os.getenv('DB_PATH')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS gifts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            model TEXT,
            portals_price REAL,
            tonnel_price REAL,
            mrkt_price REAL,
            auction_end_time TEXT,
            profit REAL
        )
    ''')
    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∞—Ä–∫–∞—Ö
def update_gifts():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
    portals_data = fetch_market_data('portals')
    tonnel_data = fetch_market_data('tonnel')
    mrkt_data = fetch_market_data('mrkt')

    # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
    for gift in portals_data:
        profit = calculate_profit(gift, portals_data, tonnel_data, mrkt_data)
        if profit > 0.1:  # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
            save_to_db(gift, profit)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
def save_to_db(gift, profit):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO gifts (name, model, portals_price, tonnel_price, mrkt_price, auction_end_time, profit)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (gift['name'], gift['model'], gift['portals_price'], gift['tonnel_price'], gift['mrkt_price'], gift['auction_end_time'], profit))
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ê—Ä–±–∏—Ç—Ä–∞–∂"), types.KeyboardButton("–ê—É–∫—Ü–∏–æ–Ω"))
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞
@bot.message_handler(func=lambda message: True)
def handle_choice(message):
    if message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂":
        arbitrage(message)
    elif message.text == "–ê—É–∫—Ü–∏–æ–Ω":
        auction(message)

# –ê—Ä–±–∏—Ç—Ä–∞–∂
def arbitrage(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM gifts ORDER BY profit DESC')
    gifts = cursor.fetchall()
    conn.close()

    response = "–°–ø–∏—Å–æ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n"
    for gift in gifts:
        response += f"üéÅ {gift[1]} ({gift[2]})\n"
        response += f"üí∞ Portals: {gift[3]} TON | Tonnel: {gift[4]} TON | MRKT: {gift[5]} TON\n"
        response += f"üìà –ü—Ä–∏–±—ã–ª—å: {gift[6]} TON\n\n"

    bot.send_message(message.chat.id, response)

# –ê—É–∫—Ü–∏–æ–Ω
def auction(message):
    # –õ–æ–≥–∏–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    bot.send_message(message.chat.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
def auto_update():
    while True:
        try:
            update_gifts()
            print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        time.sleep(30)

if __name__ == "__main__":
    init_db()
    update_tokens()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ API
    auto_update_thread = threading.Thread(target=auto_update)
    auto_update_thread.start()
    bot.polling(none_stop=True)
